/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
// /components/heart/heart-model.tsx

import * as THREE from 'three'
import React, { use, useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLearningStore } from '@/store/learning-store'


type GLTFResult = GLTF & {
  nodes: {
    ['heart-muscle']: THREE.SkinnedMesh
    Object_30: THREE.SkinnedMesh
    ['right-atrium']: THREE.SkinnedMesh
    GLTF_created_0_rootJoint: THREE.Bone
  }
  materials: {
    ['material_0.001']: THREE.MeshPhysicalMaterial
    material_0: THREE.MeshPhysicalMaterial
  }
}

interface MeshRefs {
  [key: string]: React.MutableRefObject<THREE.SkinnedMesh | null>;
}

// Map of structure names to mesh names in the model (WILL NEED TO CHANGE TO HAVE THE ACTUAL MESHES IN THE RIGHT PLACE)
type StructureMeshMap = {
  [key: string]: string;
}

const STRUCTURE_MESH_MAP: StructureMeshMap = {
  'sa-node': 'right-atrium',
  'av-node': 'heart-muscle',
  'bundle-of-his': 'Object_30',
  // Add more mappings as needed
};


export function HeartModel(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null);
  const rightAtrium = useRef<THREE.SkinnedMesh>(null);
  const { nodes, materials } = useGLTF('/3d-models/heart-cross-new.glb') as GLTFResult
  console.log('nodes and materials', nodes, materials)

  // Get highlighted structures from store
  const highlightedStructures = useLearningStore(state => state.highlightedStructures);

   // Create refs for all meshes we want to manipulate
   const meshRefs: MeshRefs = {
    'heart-muscle': useRef<THREE.SkinnedMesh>(null),
    'right-atrium': useRef<THREE.SkinnedMesh>(null),
    'Object_30': useRef<THREE.SkinnedMesh>(null),
  };

  // Effect to handle highlighting
  useEffect(() => {
    // Reset all materials to default state
    Object.values(meshRefs).forEach(meshRef => {
      if (meshRef.current) {
        const material = meshRef.current.material as THREE.MeshPhysicalMaterial;
        material.color.set('#ffffff'); 
        material.opacity = 1;
      }
    });

    // Apply highlighting to selected structures
    highlightedStructures.forEach(structureId => {
      const meshName = STRUCTURE_MESH_MAP[structureId];
      const meshRef = meshRefs[meshName];
      
      if (meshRef?.current) {
        // Highlight the structure (adjust colors/effects as needed)
        const material = meshRef.current.material as THREE.MeshPhysicalMaterial;
        material.color.set('orange'); // color is red
        material.opacity = 0.8;
      }
    });
  }, [highlightedStructures]);
  
  // testing blender stuff

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="RootNode0_0" scale={0.01}>
                <group name="skeletal3_3">
                  <group name="GLTF_created_0">
                    <skinnedMesh
                      castShadow
                      ref={meshRefs['heart-muscle']}
                      name="heart-muscle"
                      geometry={nodes['heart-muscle'].geometry}
                      material={materials['material_0.001']}
                      skeleton={nodes['heart-muscle'].skeleton}
                    />
                    <group name="heart2_2_correction">
                      <group name="heart2_2" />
                    </group>
                    <skinnedMesh
                      castShadow
                      ref={meshRefs['right-atrium']}
                      name="Object_30"
                      geometry={nodes.Object_30.geometry}
                      material={materials.material_0}
                      skeleton={nodes.Object_30.skeleton}
                    />
                    <skinnedMesh
                      castShadow
                      ref={meshRefs['Object_30']}
                      name="right-atrium"
                      geometry={nodes['right-atrium'].geometry}
                      material={materials.material_0}
                      skeleton={nodes['right-atrium'].skeleton}
                    />
                    <group name="right-atrium-int" />
                    <primitive object={nodes.GLTF_created_0_rootJoint} />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/3d-models/heart-cross-new.glb')
